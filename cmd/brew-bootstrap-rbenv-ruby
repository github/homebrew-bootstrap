#!/bin/bash
# Installs Ruby and Bundler.
set -e

if [ "$1" = "--debug" ]; then
  shift
  PRINT_DEBUG="1"
  set -x
fi

warn() { echo "$@" >&2; }
abort() { EXPECTED_EXIT="1"; warn "$@"; exit 1; }

cleanup() {
  set +e
  if [ -n "$EXPECTED_EXIT" ]; then
    return
  fi
  warn "Error: $(basename $0) failed!"
  if [ -z "$PRINT_DEBUG" ]; then
    warn "For debugging output run:"
    warn "  $0 --debug"
    warn "If you're stuck: file an issue with debugging output at:"
    warn "  https://github.com/github/homebrew-bootstrap/issues/new"
  fi
}
trap "cleanup" EXIT

BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

if ! which rbenv &>/dev/null; then
  abort "Error: you need to 'brew install rbenv'!"
fi

if [ $(type -t rbenv) != 'function' ]; then
  warn "Warning: setting up rbenv temporarily."
  warn "You may need to set it up in your shell; check \`brew info rbenv\`"
  eval "$(rbenv init -)"
fi

if ! rbenv version-name &>/dev/null; then
  RUBY_REQUESTED="$(rbenv local)"
  RUBY_DEFINITION="$(ruby-build --definitions | grep "^$RUBY_REQUESTED$" || true)"

  if [ -z "$RUBY_DEFINITION" ]; then
    RUBY_DEFINITION="$BASE_PATH/ruby-definitions/$RUBY_REQUESTED"

    if ! [ -f "$RUBY_DEFINITION" ]; then
      warn  "Error: cannot find Ruby $RUBY_REQUESTED definition file at:"
      abort "$RUBY_DEFINITION"
    fi
  fi

  HOMEBREW_PREFIX="$(brew --prefix)"
  export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$HOMEBREW_PREFIX/opt/openssl"

  rbenv install --skip-existing "$RUBY_DEFINITION"
fi

if [ "$(rbenv exec ruby --version)" != "$(ruby --version)" ]; then
  abort 'Error: add `eval "$(rbenv init -)"` to the end of your .bash_profile/.zshrc!'
fi

(rbenv which bundle &>/dev/null && bundle -v &>/dev/null) || {
  gem install bundler
  rbenv rehash
}

EXPECTED_EXIT="1"
exit 0
